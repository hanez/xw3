
require 'packr'


module Jekyll
  module Compressor
    @@mtimes = {}

    def compress_html(content)
      content.gsub(/(?>[^\S ]\s*|\s{2,})(?=(?:(?:[^<]++|<(?!\/?(?:textarea|pre)\b))*+)(?:<(?>textarea|pre)\b|\z))/ix, '')
    end

    # Really writing process
    def output_file(dest, content)
      FileUtils.mkdir_p(File.dirname(dest))
      File.open(dest, 'w') do |f|
        f.write(content)
      end
    end

    def output_html(dest, content)
      path = self.destination(dest)
      self.output_file(path, compress_html(content))
    end

    def output_js(dest, content)
      self.output_file(dest, Packr.pack(content,
        :shrink_vars => true
      ))
    end
  end

  class Post

    include Compressor

    def write(dest)
      self.output_html(dest, self.output)
    end

  end



  class Page

    include Compressor

    def write(dest)
      self.output_html(dest, self.output)
    end

  end



  class StaticFile

    include Compressor

    def write(dest)
      dest_path = self.destination(dest)

      return false if File.exist?(dest_path) and !self.modified?
      @@mtimes[path] = mtime

      case File.extname(dest_path)
        when '.html'
          self.output_html(dest_path, File.read(path))
        when '.js'
          self.output_js(dest_path, File.read(path))
        else
          FileUtils.mkdir_p(File.dirname(dest_path))
          FileUtils.cp(path, dest_path)
      end

      true
    end

  end

end
